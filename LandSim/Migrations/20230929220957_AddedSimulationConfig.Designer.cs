// <auto-generated />
using System;
using LandSim.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LandSim.Migrations
{
    [DbContext(typeof(MapContext))]
    [Migration("20230929220957_AddedSimulationConfig")]
    partial class AddedSimulationConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("LandSim.Areas.Agents.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgentOwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Hunger")
                        .HasColumnType("REAL");

                    b.Property<float>("Thirst")
                        .HasColumnType("REAL");

                    b.Property<int>("XCoord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YCoord")
                        .HasColumnType("INTEGER");

                    b.HasKey("AgentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("LandSim.Areas.Agents.Models.AgentAction", b =>
                {
                    b.Property<int>("AgentActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AgentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AgentActionId");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("AgentActions");
                });

            modelBuilder.Entity("LandSim.Areas.Agents.Models.AgentOwner", b =>
                {
                    b.Property<int>("AgentOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostbackUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AgentOwnerId");

                    b.ToTable("AgentOwner");
                });

            modelBuilder.Entity("LandSim.Areas.Configuration.Models.SimulationConfig", b =>
                {
                    b.Property<int>("SimulationConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("AgentSpawnChange")
                        .HasColumnType("REAL");

                    b.Property<float>("BaseHungerCost")
                        .HasColumnType("REAL");

                    b.Property<float>("ClimbHungerCost")
                        .HasColumnType("REAL");

                    b.Property<float>("ConsumableHungerIncrease")
                        .HasColumnType("REAL");

                    b.Property<float>("ConsumableSpawnChance")
                        .HasColumnType("REAL");

                    b.Property<float>("ConsumableVegitationSpawnThreshold")
                        .HasColumnType("REAL");

                    b.Property<float>("MovementHungerCost")
                        .HasColumnType("REAL");

                    b.Property<float>("VegitationDecreaseFromMovement")
                        .HasColumnType("REAL");

                    b.Property<float>("VegitationGrowthRate")
                        .HasColumnType("REAL");

                    b.Property<float>("VegitationMovementHungerCost")
                        .HasColumnType("REAL");

                    b.Property<float>("VegitationSpawnChance")
                        .HasColumnType("REAL");

                    b.Property<float>("VegitationSpreadChance")
                        .HasColumnType("REAL");

                    b.HasKey("SimulationConfigId");

                    b.ToTable("SimulationConfigs");
                });

            modelBuilder.Entity("LandSim.Areas.Generation.Models.GenerationSettings", b =>
                {
                    b.Property<int>("GenerationSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Frequency")
                        .HasColumnType("REAL");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("GenerationSettingsId");

                    b.ToTable("GenerationSettings");
                });

            modelBuilder.Entity("LandSim.Areas.Generation.Models.TerrainSelector", b =>
                {
                    b.Property<int>("TerrainSelectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GenerationSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("MaxValue")
                        .HasColumnType("REAL");

                    b.Property<float>("MinValue")
                        .HasColumnType("REAL");

                    b.Property<int>("TerrainType")
                        .HasColumnType("INTEGER");

                    b.HasKey("TerrainSelectorId");

                    b.HasIndex("GenerationSettingsId");

                    b.ToTable("TerrainSelectors");
                });

            modelBuilder.Entity("LandSim.Areas.Map.Models.Consumable", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("XCoord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YCoord")
                        .HasColumnType("INTEGER");

                    b.HasKey("ConsumableId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("LandSim.Areas.Map.Models.TerrainTile", b =>
                {
                    b.Property<int>("TerrainTileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Height")
                        .HasColumnType("REAL");

                    b.Property<int>("TerrainType")
                        .HasColumnType("INTEGER");

                    b.Property<float>("VegetationLevel")
                        .HasColumnType("REAL");

                    b.Property<int>("XCoord")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YCoord")
                        .HasColumnType("INTEGER");

                    b.HasKey("TerrainTileId");

                    b.ToTable("TerrainTiles");
                });

            modelBuilder.Entity("LandSim.Areas.Generation.Models.TerrainSelector", b =>
                {
                    b.HasOne("LandSim.Areas.Generation.Models.GenerationSettings", null)
                        .WithMany("TerrainSelectors")
                        .HasForeignKey("GenerationSettingsId");
                });

            modelBuilder.Entity("LandSim.Areas.Generation.Models.GenerationSettings", b =>
                {
                    b.Navigation("TerrainSelectors");
                });
#pragma warning restore 612, 618
        }
    }
}
