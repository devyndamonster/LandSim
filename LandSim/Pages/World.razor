@page "/world"
@using LandSim.Areas.Map.Components;
@using LandSim.Areas.Map;
@using LandSim.Areas.Map.Models;

<PageTitle>World Map</PageTitle>

<div style="height:100%; width:100%; padding:5px;">
    <div style="height:100%; width:100%; position:relative;">
        <div style="position:absolute; top:0px; bottom:0px; left:0px; right:0px; overflow:scroll;">
            <MapGrid Terrain="terrain" Consumables="consumables" />
        </div>
    </div>
</div>



@code {

    [Inject]
    public IServiceScopeFactory Services { get; set; } = null!;

    [Inject]
    public ILogger<World> Logger { get; set; } = null!;

    [Inject]
    public SimulationEventAggregator SimulationEventAggregator { get; set; } = null!;

    private TerrainTile?[,] terrain { get; set; } = new TerrainTile[0, 0];

    private Consumable?[,] consumables { get; set; } = new Consumable[0, 0];

    protected override async void OnInitialized()
    {
        var worldData = await GetWorldData();
        terrain = worldData.TerrainTiles;
        consumables = worldData.Consumables;

        SimulationEventAggregator.Subscribe<MapUpdateEvent>(UpdateTerrain);
    }

    public void UpdateTerrain(MapUpdateEvent mapUpdateEvent)
    {
        terrain = mapUpdateEvent.TerrainTiles;
        consumables = mapUpdateEvent.Consumables;

        InvokeAsync(StateHasChanged);
    }

    public async Task<WorldData> GetWorldData()
    {
        using (var scope = Services.CreateScope())
        {
            var db = scope.ServiceProvider.GetRequiredService<MapGenerationRepository>();
            return await db.GetWorldData();
        }
    }

    public void Dispose()
    {
        SimulationEventAggregator.Unsubscribe<MapUpdateEvent>(UpdateTerrain);
    }

}
