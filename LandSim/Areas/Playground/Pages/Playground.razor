@page "/playground"
@using LandSim.Areas.Agents.Models;
@using LandSim.Areas.Configuration.Models;
@using LandSim.Areas.Map.Components
@using LandSim.Areas.Map.Enums;
@using LandSim.Areas.Map.Models;
@using LandSim.Areas.Simulation.Services;
@using LandSim.Extensions;

<PageTitle>Playground</PageTitle>

<GridRow Style="height:100%;">
    <GridCol Style="padding: 5px; flex: none; height: 100%; overflow:scroll">
        <Form Model="@settings" Layout="@FormLayout.Vertical">
            <FormItem Label="Width">
                <Input @bind-Value="context.Width" />
            </FormItem>
            <FormItem Label="Height">
                <Input @bind-Value="context.Height" />
            </FormItem>
            <Button OnClick="UpdateSettings">Update Settings</Button>
            <Button OnClick="StepSimulation">Step Simulation</Button>
        </Form>
    </GridCol>
    <GridCol Flex=@("auto")>
        <div style="flex-grow:1; height:100%; position:relative; padding:5px;">
            <div style="height:100%; width:100%; position:relative;">
                <div style="position:absolute; top:0px; bottom:0px; left:0px; right:0px; overflow:scroll;">
                    <MapGrid Terrain="worldData.TerrainTiles" Consumables="worldData.Consumables" Agents="worldData.Agents" OnTerrainSelected="OnTerrainClicked" />
                </div>
            </div>
            <Drawer Width="400" Closable="true" Visible="selectedLocation is not null" Placement="right" Title='($"Edit {selectedLocation?.XCoord} - {selectedLocation?.YCoord}")' OnClose="() => selectedLocation = null">
                @if(selectedLocation is not null)
                {
                    @if (worldData.Agents[selectedLocation.XCoord, selectedLocation.YCoord] is Agent selectedAgent)
                    {
                        <Button OnClick="() => DeleteAgent(selectedLocation)">Delete Agent</Button>
                        <EnumSelect TEnum="AgentActionType" @bind-Value="GetSelectedAgentAction(selectedAgent).ActionType" />
                    }
                    else
                    {
                        <Button OnClick="() => SpawnAgent(selectedLocation)">Spawn Agent</Button>
                    }
                }
            </Drawer>
        </div>
    </GridCol>
</GridRow>

@code {

    public class PlaygroundSettings
    {
        public int Width { get; set; } = 10;
        public int Height { get; set; } = 10;
    }

    private WorldData worldData = new WorldData(new TerrainTile[0], new Consumable[0], new Agent[0]);
    private List<AgentAction> queuedAgentActions = new List<AgentAction>();
    private PlaygroundSettings settings = new PlaygroundSettings();
    private ILocation? selectedLocation;

    protected override void OnInitialized()
    {
        UpdateSettings();
        base.OnInitialized();
    }

    public void UpdateSettings()
    {
        TerrainTile[,] terrain = (new TerrainTile[settings.Width, settings.Height])
            .Map(tile => new TerrainTile
            {
                XCoord = tile.x,
                YCoord = tile.y,
                TerrainType = TerrainType.Sand,
            })!;

        var consumables = new Consumable[settings.Width, settings.Height];
        var agents = new Agent[settings.Width, settings.Height];
        var bounds = Bounds.FromLocations(terrain.Select(t => t.Value!).ToArray());

        worldData = new WorldData(bounds, terrain, consumables, agents);
        StateHasChanged();
    }

    public AgentAction GetSelectedAgentAction(Agent agent)
    {
        return queuedAgentActions.First(action => action.AgentId == agent.AgentId);
    }

    public void OnTerrainClicked(TerrainTile tile)
    {
        selectedLocation = tile;
        StateHasChanged();
    }

    public void SpawnAgent(ILocation location)
    {
        var largestAgentId = worldData.Agents.Select(a => a.Value?.AgentId ?? 0).Max();
        var nextAgentId = largestAgentId + 1;

        worldData.Agents[location.XCoord, location.YCoord] = new Agent()
        {
            AgentId = nextAgentId,
            AgentOwnerId = 0,
            XCoord = location.XCoord,
            YCoord = location.YCoord,
        };

        queuedAgentActions.Add(new AgentAction
        {
            AgentId = nextAgentId,
            ActionType = AgentActionType.None,
            AgentActionId = queuedAgentActions.Count(),
        });

        StateHasChanged();
    }

    public void DeleteAgent(ILocation location)
    {
        var agent = worldData.Agents[location.XCoord, location.YCoord]!;

        worldData.Agents[location.XCoord, location.YCoord] = null;
        queuedAgentActions.RemoveAll(action => action.AgentId == agent.AgentId);

        StateHasChanged();
    }

    public void StepSimulation()
    {
        var agentOwners = new AgentOwner[]
        {
            new AgentOwner()
            {
                AgentOwnerId = 0,
            }
        };

        var simulationService = new SimulationService();
        worldData = simulationService.GetUpdatedWorldData(worldData, new SimulationConfig(), agentOwners, queuedAgentActions);

        StateHasChanged();
    }


}
