@using LandSim.Areas.Map.Enums;
@using LandSim.Areas.Map.Models;
@using LandSim.Areas.Map.Services;
@using AntDesign;

<Form Model="@Settings" Layout="@FormLayout.Vertical">

    <FormItem Label="Seed">
        <Input @bind-Value="context.Seed" />
    </FormItem>
    <FormItem Label="Width">
        <AntDesign.InputNumber @bind-Value="context.Width" Min="1" Max="1000"/>
    </FormItem>
    <FormItem Label="Height">
        <AntDesign.InputNumber @bind-Value="context.Height" Min="1" Max="1000" />
    </FormItem>
    <FormItem Label="Frequency">
        <AntDesign.InputNumber @bind-Value="context.Frequency"/>
    </FormItem>

    <FormItem Label="Terrain Selectors">
        @foreach(var terrainSelector in context.TerrainSelectors)
        {
            <Card Bordered="true">
                <GridRow Gutter="8">
                    <GridCol Flex=@("auto")>
                        <FormItem>
                            <EnumSelect TEnum="TerrainType" @bind-Value="terrainSelector.TerrainType"/>
                        </FormItem>
                    </GridCol>
                    <GridCol Flex=@("none")>
                        <Button Icon="plus" OnClick="() => context.TerrainSelectors.Insert(context.TerrainSelectors.IndexOf(terrainSelector), new TerrainSelector())" />
                    </GridCol>
                    <GridCol Flex=@("none")>
                        <Button Icon="close" OnClick="() => context.TerrainSelectors.Remove(terrainSelector)" />
                    </GridCol>
                    <GridCol Span="24">
                        <FormItem Label="Range">
                            <Slider TValue="(double Min, double Max)" Min="0" Max="1" @bind-Value="terrainSelector.Range" Step="0.01" />
                        </FormItem>
                    </GridCol>
                </GridRow>
            </Card>
        }
    </FormItem>

    <Button OnClick="UpdateSettings">Update Settings</Button>
    <Button OnClick="ApplyGeneratedTerrain">ApplyToTerrain</Button>

</Form>

@code {

    [Parameter, EditorRequired]
    public GenerationSettings Settings { get; set; }

    [Parameter, EditorRequired]
    public Action<GenerationSettings> OnSettingsUpdated { get; set; }

    [Parameter, EditorRequired]
    public Action OnGeneratedTerrainApplied { get; set; }

    [Inject]
    public TerrainService TerrainService { get; set; }

    private void UpdateSettings()
    {
        OnSettingsUpdated(Settings);
    }

    private void ApplyGeneratedTerrain()
    {
        OnGeneratedTerrainApplied();
    }

}
