@using LandSim.Areas.Map.Enums;
@using LandSim.Areas.Map.Models;
@using LandSim.Areas.Map.Services;
@using LandSim.Extensions;

<div class="map-grid-container" style="grid-template-columns: repeat(@(Terrain.GetLength(0)), 1fr);">

    @for (int x = 0; x < Terrain.GetLength(0); x++)
    {
        @for (int y = 0; y < Terrain.GetLength(1); y++)
        {
            <div id="[@x][@y]" class="terrain-tile" style="background-color: @(GetColorForTile(Terrain[x,y]));">
                <div style="position:absolute; top:0px; bottom:0px; left:0px; right:0px; display: flex; justify-content: center; align-items: center; color: white;">
                    @if (Agents.IsInArray(x, y) && Agents[x, y] is not null)
                    {
                        <div>&#128023;</div>
                    }
                    else if (Consumables.IsInArray(x, y) && Consumables[x, y] is not null)
                    {
                        <div>&#127813;</div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {

    [Parameter, EditorRequired]
    public TerrainTile?[,] Terrain { get; set; } = new TerrainTile?[0, 0];

    [Parameter]
    public Consumable?[,] Consumables { get; set; } = new Consumable?[0, 0];

    [Parameter]
    public Agent?[,] Agents { get; set; } = new Agent?[0, 0];

    [Inject]
    public TerrainService TerrainService { get; set; } = default!;

    protected string GetColorForTile(TerrainTile? tile)
    {
        if(tile != null)
        {
            return TerrainService.GetColorForTerrain(tile).GetCssColor();
        }

        return (new Color(0)).GetCssColor();
    }

}
