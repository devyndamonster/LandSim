@using LandSim.Areas.Agents.Models;
@using LandSim.Areas.Agents;
@using LandSim.Areas.Map.Models;
@using LandSim.Areas.Map.Services;
@using LandSim.Extensions;
@using Excubo.Blazor.Canvas

<div style="position: relative;">
    <Canvas @ref="terrainCanvas" width="@(Terrain.GetLength(0) * tileSize)" height="@(Terrain.GetLength(1) * tileSize)" style="position: absolute; left: 0; top: 0; z-index: 0;" />
    <Canvas @ref="emojiCanvas" width="@(Terrain.GetLength(0) * tileSize)" height="@(Terrain.GetLength(1) * tileSize)" style="position: absolute; left: 0; top: 0; z-index: 1;" />
</div>

@code {

    [Parameter, EditorRequired]
    public TerrainTile?[,] Terrain { get; set; } = new TerrainTile?[0, 0];

    [Parameter]
    public Consumable?[,] Consumables { get; set; } = new Consumable?[0, 0];

    [Parameter]
    public Agent?[,] Agents { get; set; } = new Agent?[0, 0];

    [Parameter]
    public Action<Agent>? OnAgentSelected { get; set; }

    [Inject]
    public TerrainService TerrainService { get; set; } = default!;

    private Canvas terrainCanvas = null!;
    private Canvas emojiCanvas = null!;

    private int tileSize = 20;
    private bool drawing = false;
    public Consumable?[,]? previousConsumables { get; set; }

    protected override async Task OnAfterRenderAsync(bool first_render)
    {
        if (!drawing)
        {
            drawing = true;
            await DrawTerrain();
            await DrawEmojis();
            drawing = false;

            previousConsumables = Consumables;
        }

        await base.OnAfterRenderAsync(first_render);
    }

    private async Task DrawTerrain()
    {
        await using (var ctx = await terrainCanvas.GetContext2DAsync())
        {
            await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
            await ctx.RestoreAsync();
            await ctx.SaveAsync();

            await using (var batch = ctx.CreateBatch())
            {
                for (int x = 0; x < Terrain.GetLength(0); x++)
                {
                    for (int y = 0; y < Terrain.GetLength(1); y++)
                    {
                        await batch.FillStyleAsync(GetColorForTile(Terrain[x, y]));
                        await batch.FillRectAsync(x * tileSize, y * tileSize, tileSize, tileSize);
                    }
                }
            }
        }
    }

    private async Task DrawEmojis()
    {
        await using (var ctx = await emojiCanvas.GetContext2DAsync())
        {
            await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
            await ctx.RestoreAsync();
            await ctx.SaveAsync();

            await using (var batch = ctx.CreateBatch())
            {
                for (int x = 0; x < Terrain.GetLength(0); x++)
                {
                    for (int y = 0; y < Terrain.GetLength(1); y++)
                    {
                        if (Agents[x, y] != null)
                        {
                            await batch.ClearRectAsync(x * tileSize, y * tileSize, tileSize, tileSize);
                            await batch.TextAlignAsync(TextAlign.Center);
                            await batch.TextBaseLineAsync(TextBaseLine.Middle);
                            await batch.FontAsync("20px serif");
                            await batch.FillTextAsync("🐗", x * tileSize + tileSize / 2, y * tileSize + tileSize / 2);
                        }
                        else if (Consumables[x, y] is not null && (previousConsumables is null || previousConsumables[x, y] is null))
                        {
                            await batch.ClearRectAsync(x * tileSize, y * tileSize, tileSize, tileSize);
                            await batch.TextAlignAsync(TextAlign.Center);
                            await batch.TextBaseLineAsync(TextBaseLine.Middle);
                            await batch.FontAsync("20px serif");
                            await batch.FillTextAsync("🍅", x * tileSize + tileSize / 2, y * tileSize + tileSize / 2);
                        }
                        else if(Consumables[x, y] is null && Agents[x, y] is null)
                        {
                            await batch.ClearRectAsync(x * tileSize, y * tileSize, tileSize, tileSize);
                        }
                    }
                }
            }
        }
    }

    protected string GetColorForTile(TerrainTile? tile)
    {
        if(tile != null)
        {
            return TerrainService.GetColorForTerrain(tile).GetCssColor();
        }

        return (new LandSim.Areas.Map.Models.Color(0)).GetCssColor();
    }

    public void OnAgentClicked(Agent agent)
    {
        if(OnAgentSelected != null)
        {
            OnAgentSelected(agent);
        }
    }

}
